---
title: Your First Haskell Function
date: 2019-05-01 21:42 -03
tags: Haskell
---

<script type="application/ld+json">
{
 "@context": "https://schema.org", 
 "@type": "BlogPosting",
 "url": "https://lautarolobo.xyz/blog/first-haskell-function",
 "mainEntityOfPage": "https://lautarolobo.xyz/blog/first-haskell-function",
 "headline": "Your First Haskell Function",
 "alternativeHeadline": "You won't be a total newbie at Haskell anymore!",
 "genre": "Haskell", 
 "keywords": [
  "Haskell", 
  "Programming", 
  "Computer Science"
],  
 "wordcount": "380",
 "datePublished": "2019-05-01",
 "dateCreated": "2019-05-01",
 "dateModified": "2019-05-22",
 "description": "You want to go deeper in Haskell? Well, let's do it! We will define our first function, easy peasy.",
 "isFamilyFriendly": "true",
 "image": "https://imgsafe.org/image/5709e8ceba",
 "publisher": {
  "@type": "Organization",
  "name": "Lautaro Jordan Lobo Ravarotto",
  "url": "https://lautarolobo.xyz",
  "logo": {  
   "@type": "ImageObject",
   "author": "Lautaro Jordan Lobo Ravarotto",
   "url": "https://imgsafe.org/image/5709e8ceba.png"
   }
  },
 "author": {
  "@type": "Person",
  "name": "Lautaro Jordan Lobo Ravarotto",
  "url": "https://lautarolobo.xyz",
  "email": "contact@lautarolobo.xyz",
  "birthDate": "2000-04-12",
  "gender": "male",
  "nationality": "Argentina",
  "alumniOf": {
   "@type": "CollegeOrUniversity",
   "legalName": "National University of Córdoba",
   "sameAs": "https://en.wikipedia.org/wiki/National_University_of_C%C3%B3rdoba",
   "location": {
    "@type": "Place",
    "sameAs": "http://unc.edu.ar",
    "name": "National University of Córdoba",
    "address": {
      "@type": "PostalAddress",
      "streetAddress": "Av. Haya de la Torre s/n",
      "addressCountry": "Argentina",
      "addressLocality": "Córdoba",
      "postalCode": "5000" 
      }
     }
    }
   },
 "creator": {
  "@type": "Person",
  "name": "Lautaro Jordan Lobo Ravarotto",
  "url": "https://lautarolobo.xyz",
  "email": "contact@lautarolobo.xyz",
  "birthDate": "2000-04-12",
  "gender": "male",
  "nationality": "Argentina",
  "alumniOf": {
   "@type": "CollegeOrUniversity",
   "legalName": "National University of Córdoba",
   "sameAs": "https://en.wikipedia.org/wiki/National_University_of_C%C3%B3rdoba",
   "location": {
    "@type": "Place",
    "sameAs": "http://unc.edu.ar",
    "name": "National University of Córdoba",
    "address": {
      "@type": "PostalAddress",
      "streetAddress": "Av. Haya de la Torre s/n",
      "addressCountry": "Argentina",
      "addressLocality": "Córdoba",
      "postalCode": "5000" 
      }
     }
    }   
   }
  }
 }
},
</script>

Your first Haskell function. Who would say that you would come this far, ah. 

A function takes some parameters and shows up an output, after a computational process that used the parameters in some way.

The function that we are going to define today, since it's the first one, will be basic. You will give it two numbers and it'll sum them, giving you back a single number. But, what kind of number? Any number? Actually not, this function will work with just Integers. You will clarifiy this by writing the _type_ of the function.

The first thing that you should know about writing functions in Haskell, is that you should always define the type of the function before you define the function itself, if you don't define it, Haskell will figure out which type is the best to match with your function, most of the time it will figure it out right, but some times may miss match the inferenced type and your function won't work.

```haskell
sumBoth :: Int -> Int -> Int
```

We defined the type; it takes one Integer, then another Integer, and the output will be an Integer, great. You may have noticed that I named the function "sumBoth", this is because it's important that the function's name tells you what that particular function does and also, the name should be short, so when you call it you won't waste much time writing it. It may seem a silly advise but trust me, getting used to good practices will save you tons of bugs.

Now, the function definition:

```haskell 
sumBoth x y = x + y
```

And that's it! Now save your file with _.hs_ extension, and then open up the terminal, we will test this function there. Go to the directory where you saved your file and simply write

```console
ghci
```

You'll see something like this:

```console
GHCi, version x.y.z: http://www.haskell.org/ghc/  :? for help
Prelude>
```

There write

```console
:load filename.hs
```

And this should show up:

```console
[1 of 1] Compiling Main             ( filename.hs, interpreted )
Ok, modules loaded: Main.
*Main>
```


Then call sumBoth and in the line below you'll see the result:

```console
*Main> sumBoth 5 4
9
```

<hr>

Something went wrong? Please [tell me](mailto:contact@lautarolobo.xyz) and I'll be glad to help you out!

Want to try the next level? [Go ahead!](https://lautarolobo.xyz/blog/recursive-function-haskell)

